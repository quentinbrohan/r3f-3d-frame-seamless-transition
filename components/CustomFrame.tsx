/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF, useTexture } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { JSX, useRef, useState } from 'react'
import * as THREE from 'three'
import { GLTF } from 'three-stdlib'
import { useCursor } from '@react-three/drei'

type GLTFResult = GLTF & {
    nodes: {
        model: THREE.Mesh
        Plane002: THREE.Mesh
    }
    materials: {
        ['CustomMaterial.001']: THREE.MeshStandardMaterial
    }
}

export function CustomFrame(props: JSX.IntrinsicElements['group']) {
    const {
        onThroughPlane,
        isMovingThrough,
    } = props as {
        onThroughPlane: () => void
        isMovingThrough: boolean
    }
    const groupRef = useRef()
    const planeRef = useRef()


    const { nodes, materials } = useGLTF('/custom-frame.glb') as GLTFResult
    const texture = useTexture("/images/frustration.jpg")
    const metalBasePath = '/images/Metal003_1K-JPG'
    const metalBaseName = 'Metal003_1K-JPG'
    const combinedPath = `${metalBasePath}/${metalBaseName}`
    const metalTextures = useTexture({
        map: `${combinedPath}_Color.jpg`,
        normalMap: `${combinedPath}_NormalGL.jpg`,
        roughnessMap: `${combinedPath}_Roughness.jpg`,
        metalnessMap: `${combinedPath}_Metalness.jpg`,
        // displacementMap: `${combinedPath}_Displacement.jpg`,
    })

    const mouse = useRef(new THREE.Vector2(0, 0))

    const [hovered, set] = useState(false)
    useCursor(hovered, /*'pointer', 'auto', document.body*/)

    if (texture) texture.flipY = false

    const handleDoubleClick = (event: any) => {
        event.stopPropagation()
        onThroughPlane()
    }

    const handleMouseMove = (event: any) => {
        // Convert mouse position to normalized device coordinates (-1 to +1)
        mouse.current.x = (event.clientX / window.innerWidth) * 2 - 1
        mouse.current.y = -(event.clientY / window.innerHeight) * 2 + 1
    }

    useFrame((state) => {
        if (groupRef.current && !isMovingThrough) {
            // Enhanced floating animation when not moving through
            const baseY = Math.sin(state.clock.elapsedTime * 0.6) * 0.15
            const baseRotationY = Math.sin(state.clock.elapsedTime * 0.4) * 0.08
            const baseRotationX = Math.cos(state.clock.elapsedTime * 0.5) * 0.03
            const baseRotationZ = Math.sin(state.clock.elapsedTime * 0.3) * 0.02

            // Add subtle mouse-following rotation
            const mouseInfluence = 0.1 // Adjust this value to control how much the frame follows the mouse
            const targetRotationY = baseRotationY + mouse.current.x * mouseInfluence
            const targetRotationX = baseRotationX + mouse.current.y * mouseInfluence

            // Apply smooth interpolation for natural movement
            groupRef.current.position.y = baseY
            groupRef.current.rotation.y += (targetRotationY - groupRef.current.rotation.y) * 0.05
            groupRef.current.rotation.x += (targetRotationX - groupRef.current.rotation.x) * 0.05
            groupRef.current.rotation.z = baseRotationZ
        }
    })


    return (
        <group {...props} dispose={null}
            // scale={0.04}
            scale={0.02}
            ref={groupRef}

            onPointerMove={handleMouseMove}

        >
            <mesh
                name="model"
                castShadow
                receiveShadow
                geometry={nodes.model.geometry}
                material={materials['CustomMaterial.001']}
                position={[0, -73.26, 0.327]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={79.651}
            >
                <meshStandardMaterial
                    // color="#808080"
                    // color="#f1f3f9"
                    // metalness={1}
                    // roughness={0.2}
                    // envMapIntensity={2}
                    {...metalTextures}
                    displacementScale={0.1} // Adjust to taste
                    metalness={1}
                    roughness={0.1}
                />
                {/* <meshStandardMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} envMapIntensity={1.5} /> */}
            </mesh>
            <mesh
                ref={planeRef}
                name="Plane002"
                castShadow
                receiveShadow
                geometry={nodes.Plane002.geometry}
                material={nodes.Plane002.material}
                onDoubleClick={handleDoubleClick}
                onPointerOver={() => set(true)} onPointerOut={() => set(false)}

            >
                <meshStandardMaterial
                    map={texture}
                    transparent={false}
                />
            </mesh>
        </group>
    )
}

useGLTF.preload('/custom-frame.glb')